# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Proxy {
  id: Int!
  host: String!
  port: Int!
  updates: [ProxyListUpdate!]!
  testsRuns: [ProxyTestRun!]!
  sources: [ProxySourcesView!]!
}

type ProxyListUpdate {
  id: Int!
  updateTime: DateTime!
  source: ProxyListSource!
  loadedProxies: [Proxy!]!
  error: JSON
  newProxies: [Proxy!]!
  newProxiesCount: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type ProxyListSource {
  id: Int!
  name: String!
  updateInterval: Int!
  updates: [ProxyListUpdate!]!
  lastUpdate: ProxyListUpdate!
}

type ProxyTestRun {
  id: Int!
  runTime: DateTime!
  protocol: Float!
  testType: ProxyTestType!
  testedProxy: Proxy!
  okResult: JSON
  errorResult: JSON
  duration_ms: Float!
}

type ProxyTestType {
  id: Int!
  name: String!
  testRuns: [ProxyTestRun!]!
}

type TelegramChatUser {
  id: Int!
  first_name: String!
  is_bot: Boolean!
  language_code: String
  last_name: String
  username: String
  dialogs(skip: Int!, take: Int!): [TelegramChatDialog!]!
}

type TelegramChatDialog {
  id: Int!
  from: TelegramChatUser!
  chatId: Int!
  inputMessage: String!
  startTime: DateTime!
  answers: [TelegramBotAnswer!]
}

type TelegramBotAnswer {
  id: Int!
  text: String!
  extra: JSON
  answerTime: DateTime!
}

type ProxySourcesView {
  source: ProxyListSource!
  firstUpdate: ProxyListUpdate!
  lastUpdate: ProxyListUpdate!
}

type BrowserManagerModel {
  knownHosts: [KnownHostModel!]!
}

type KnownHostModel {
  hostName: String!
  proxiesBlackList: [String!]
  proxiesBestList: [BestProxyItemModel!]
}

type BestProxyItemModel {
  proxyAddress: String!
  rating: Float!
}

type SiteCrawlerState {
  pendingRequests: [String!]!
}

type Pagination {
  page: Int!
  rowsPerPage: Int!
  rowsNumber: Int!
}

type PaginatedProxy {
  pagination: Pagination!
  rows: [Proxy!]!
}

type WorkerResult {
  workerId: Int!
  result: ProxyTestRun!
}

type ProxyTesterWorkerTask {
  host: String!
  port: Int!
  protocol: String!
  name: String!
}

type ProxyTesterWorkerState {
  workerId: Int!
  currentTask: ProxyTesterWorkerTask
  workers: [ProxyTesterWorkerState!]!
}

type Query {
  telegramUsers: [TelegramChatUser!]!
  telegramUser(userId: Int!): TelegramChatUser!
  state: SiteCrawlerState!
  browserManagerState: BrowserManagerModel!
  proxyListSources: [ProxyListSource!]!
  proxies(skip: Int!, take: Int!): [Proxy!]!
  proxiesPage(rowsPerPage: Int!, page: Int!): PaginatedProxy!
  proxiesCount: Int!
  proxyListUpdates(skip: Int!, take: Int!): [ProxyListUpdate!]!
  proxyTesterWorkerState: ProxyTesterWorkerState!
}

type Mutation {
  runSourceUpdate(sourceId: Int!): JSON!
  run: Boolean!
  stop: Boolean!
}

type Subscription {
  onTaskFinish: WorkerResult!
}
